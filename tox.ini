# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib}, scenario, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/prometheus_pushgateway_k8s
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=pdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    ruff
commands =
    ruff check --fix-only {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    ruff
    codespell
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell . --skip .git --skip .tox --skip build --skip lib --skip venv --skip .mypy_cache
    ruff check {[vars]all_path}

[testenv:static-charm]
description = Run static analysis checks
deps =
    pyright
    types-dataclasses
    types-PyYAML
    types-requests
    -r{toxinidir}/requirements.txt
commands =
    pyright {[vars]src_path} {posargs}


[testenv:static-lib]
description = Empty test
commands =
    ;

[testenv:{unit, scenario}]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    ops[testing]
    -r{toxinidir}/requirements.txt
commands =
    coverage run -p \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage run -p \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/scenario
    coverage combine
    coverage report

[testenv:scenario]
description = Run scenario tests
deps =
    pytest
    ops-scenario
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/scenario
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    pytest
    juju
    websockets<14.0
    pytest-operator
    aiohttp
    -r{toxinidir}/requirements.txt
commands =
    pytest -vv --tb native --log-cli-level=INFO --color=yes -s {posargs} {toxinidir}/tests/integration
